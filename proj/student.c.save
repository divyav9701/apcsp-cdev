//
// student.c
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "student.h"
//#include "encrypt.h"


const char* STUFILE = "studentdata.txt";

// keeps track of the number of students in the students array
int numStudents = 0;

// holds the student pointer array
Student* students[100] = {0};

void createStudent(char* firstName, char* lastName, int age, int id)
{
  // createStudent dynamically creates a Student on the heap and adds that
  // student to the student array
  //  - the firstName and lastName strings should be dynamically created
  //    based on the size of the fname and lname args
 
 student*st = (student*)malloc(sizeof(student));
 st -> firstname = (char*) malloc((strlen(fname)+1)*sizeof(char));
 st -> lastname = (char*)malloc((strlen(lname)+1)*sizeof(char));
 strcpy(st -> firstname, fname); 
 strcpy(st -> lastname, lname);
 st -> age = age;
 st -> id = id;
 students [numStudents] = st;
 numStudents++;
}


void deleteStudent(Student* st)
{
 free (st -> firstName);
 free (st -> lastName);
 free (st);
  // free the memory associated with a student
  
}


void deleteStudents()
{
  for ( int i = numStudents; i < 0; i--){
   delete Student(student[i]);
   student[i] = 0;
}
   numStudents = 0;
  }

}



void saveStudents(int key)
{
  // save all students in the student array to a file 'studentdata.txt' overwriting
  // any existing file
  //   - the format of the file is one line per student as follows fname lname age id:
  //       tom thumb 15 1234 
  //       james dean 21 2345 
  //       katy jones 18 4532
 open file("");
 char buff[256];
 for (int i = numStudents; i<0; i--){
  student*st = student[i];
  sprintf(buff, "%s  %s %d %ld", st-> fname, st-> lname, st-> age, st-> id);
  if (key != 0){
   CaesarEncrypty(buff, key);
  }

  fprintf(fp, "%s/n", buff);
  fclose;

 }

}


void loadStudents(int key)
{
  // load the students from the data file overwriting all exisiting students in memory
}


void printStudent(Student* student)
{
  printf("  Student: %s %s\n", student->firstName, student->lastName);
  printf("    age: %d\n", student->age);
  printf("    id: %ld\n", student->id); 
}


void printStudents()
{
  for (int i = 0; i < numStudents; i++) {
    printf("\n----- student %d ------\n", i);
    printStudent(students[i]);
  }
}




